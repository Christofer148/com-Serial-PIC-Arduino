CCS PCM C Compiler, Version 5.076, 56587               15-may.-23 17:03

               Filename:   C:\Users\jonas\Documents\CCS C Projects\Practica 9\Practica9_ComSerie_PIC-ARDUINO.lst

               ROM used:   74 words (1%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   01A
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT, NOPROTECT, PUT, NOBROWNOUT, NOLVP 
.................... #use delay (clock = 8000000) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  02
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  97
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  BCF    0A.3
0018:  BCF    0A.4
0019:  GOTO   03B (RETURN)
.................... #USE RS232(BAUD=9600, XMIT=PIN_C6, RCV=PIN_C7) 
....................  
.................... #use standard_io(b) 
.................... #use standard_io(a) 
.................... #define btn pin_A0 
....................  
.................... unsigned int contador; 
.................... int btnActivado = 0; 
....................  
.................... void main() 
001A:  MOVF   03,W
001B:  ANDLW  1F
001C:  MOVWF  03
001D:  MOVLW  0C
001E:  BSF    03.5
001F:  MOVWF  19
0020:  MOVLW  A2
0021:  MOVWF  18
0022:  MOVLW  90
0023:  BCF    03.5
0024:  MOVWF  18
0025:  CLRF   21
0026:  BSF    03.5
0027:  BSF    1F.0
0028:  BSF    1F.1
0029:  BSF    1F.2
002A:  BCF    1F.3
002B:  MOVLW  07
002C:  MOVWF  1C
002D:  BCF    03.7
.................... { 
....................    contador = 0; 
002E:  BCF    03.5
002F:  CLRF   20
....................     
....................    while (true)  
....................    { 
....................       if(input(btn)){                  // validamos si el boton esta presionado 
0030:  BSF    03.5
0031:  BSF    05.0
0032:  BCF    03.5
0033:  BTFSS  05.0
0034:  GOTO   043
....................          if(btnActivado){              // validamos si es la primera vez que se va a sumar 
0035:  MOVF   21,F
0036:  BTFSS  03.2
....................                                        // como ya se sumo una vez ya no debe de sumar 
....................          }else{                        // si no se ha sumado por primera vez se activa 
0037:  GOTO   042
....................             delay_ms(20);              // hacemos delay para que no haya rebotes 
0038:  MOVLW  14
0039:  MOVWF  22
003A:  GOTO   004
....................             if(contador == 255){       // definimos como máximo 255 al valor contador 
003B:  INCFSZ 20,W
003C:  GOTO   03F
....................                contador = 0; 
003D:  CLRF   20
....................             }else{                     // si no ha llegado al máximo sumamos 1 
003E:  GOTO   040
....................                contador++; 
003F:  INCF   20,F
....................             } 
....................             btnActivado = 1;           // indicamos que el boton ya ha sumado 1 vez 
0040:  MOVLW  01
0041:  MOVWF  21
....................          } 
....................       }else{ 
0042:  GOTO   044
....................          btnActivado = 0;              // en caso que no esté presionado el botón se declara como que no ha sumado 
0043:  CLRF   21
....................       } 
....................       PUTC(contador);                  // imprime a través del serial la variable contador 
0044:  MOVF   20,W
0045:  BTFSS  0C.4
0046:  GOTO   045
0047:  MOVWF  19
0048:  GOTO   030
....................    } 
.................... } 
0049:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
